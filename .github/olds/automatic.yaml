name: automatic

on:
  push:
    branches: [main]

jobs:

  get-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: create-version
      id: create-version
      run: echo "::set-output name=version::$(date +%Y%m%d%H%M)"
    - name: show-version
      run: echo "Version to build -> ${{ steps.create-version.outputs.version }}"
    outputs:
      version: ${{ steps.create-version.outputs.version }}
  

  build-and-push:
    needs: get-version
    runs-on: ubuntu-latest
    steps:
    - name: Check Out Repo 
      uses: actions/checkout@v2
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: ./
        file: ./Dockerfile
        tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APP_NAME }}:${{ needs.get-version.outputs.version }},${{ secrets.DOCKER_USERNAME }}/${{ secrets.APP_NAME }}:latest
        platforms: linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64/v8
        build-args: ARG_VERSION=${{ needs.get-version.outputs.version }}
    outputs:
      version: ${{ needs.get-version.outputs.version }}
  

  tag-branch:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: tag
      id: tag
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.build-and-push.outputs.version }}
    outputs:
      version: ${{ needs.build-and-push.outputs.version }}


  deploy-heroku:
    needs: tag-branch
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: generate-heroku-dockerfile
      run: |
        mkdir heroku
        cd heroku
        > Dockerfile
        echo "FROM ${{ secrets.DOCKER_USERNAME }}/${{ secrets.APP_NAME }}:${{ needs.tag-branch.outputs.version }}" >> Dockerfile
        echo "CMD gunicorn -b 0.0.0.0:\$PORT --reload app:app" >> Dockerfile
        cat Dockerfile
    - uses: gonuit/heroku-docker-deploy@v1.3.3
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP }}
        email: ${{ secrets.HEROKU_EMAIL }}
        dockerfile_directory: ./heroku
